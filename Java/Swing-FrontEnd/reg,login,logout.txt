Creating a simple user registration, login, and logout system using Java Swing and MySQL involves several steps. Below, I'll outline the process and provide some sample code.

### Prerequisites

1. **Java Development Kit (JDK)**: Make sure you have JDK installed.
2. **MySQL Database**: Ensure you have MySQL installed and running.
3. **JDBC Driver**: Include the MySQL Connector/J library in your project.

### Database Setup

First, create a database and a table for user credentials.

```sql
CREATE DATABASE userdb;

USE userdb;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL
);
```

### Java Code

Hereâ€™s a simple example of how to create a Swing application for user registration and login.

#### 1. Database Connection

Create a class to manage the database connection.

```java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Database {
    private static final String URL = "jdbc:mysql://localhost:3306/userdb";
    private static final String USER = "yourUsername";
    private static final String PASSWORD = "yourPassword";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}
```

#### 2. User Registration

Create a method to register users.

```java
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class UserService {
    public void register(String username, String password) {
        String query = "INSERT INTO users (username, password) VALUES (?, ?)";

        try (Connection conn = Database.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, username);
            stmt.setString(2, password); // In a real application, hash the password!
            stmt.executeUpdate();
            System.out.println("User registered successfully.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
```

#### 3. User Login

Create a method to log in users.

```java
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserService {
    // Existing register method...

    public boolean login(String username, String password) {
        String query = "SELECT * FROM users WHERE username = ? AND password = ?";

        try (Connection conn = Database.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, username);
            stmt.setString(2, password); // Again, this should be hashed in a real app.
            ResultSet rs = stmt.executeQuery();
            return rs.next(); // Returns true if user exists
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}
```

#### 4. Swing GUI

Now, create a simple Swing GUI for registration and login.

```java
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class UserInterface {
    private JFrame frame;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private UserService userService;

    public UserInterface() {
        userService = new UserService();
        frame = new JFrame("User Registration and Login");
        frame.setSize(300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(null);

        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setBounds(10, 10, 80, 25);
        frame.add(usernameLabel);

        usernameField = new JTextField();
        usernameField.setBounds(100, 10, 160, 25);
        frame.add(usernameField);

        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setBounds(10, 40, 80, 25);
        frame.add(passwordLabel);

        passwordField = new JPasswordField();
        passwordField.setBounds(100, 40, 160, 25);
        frame.add(passwordField);

        JButton registerButton = new JButton("Register");
        registerButton.setBounds(10, 80, 100, 25);
        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                userService.register(usernameField.getText(), new String(passwordField.getPassword()));
            }
        });
        frame.add(registerButton);

        JButton loginButton = new JButton("Login");
        loginButton.setBounds(130, 80, 100, 25);
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                boolean success = userService.login(usernameField.getText(), new String(passwordField.getPassword()));
                if (success) {
                    JOptionPane.showMessageDialog(frame, "Login successful!");
                } else {
                    JOptionPane.showMessageDialog(frame, "Login failed.");
                }
            }
        });
        frame.add(loginButton);

        frame.setVisible(true);
    }

    public static void main(String[] args) {
        new UserInterface();
    }
}
```

### Running the Application

1. Ensure your MySQL server is running and the database/table is set up.
2. Replace `yourUsername` and `yourPassword` in the `Database` class with your MySQL credentials.
3. Compile and run the `UserInterface` class.

### Important Notes

- **Password Hashing**: In production, never store passwords in plain text. Use a secure hashing algorithm (like BCrypt) to hash passwords before storing them in the database.
- **Error Handling**: Add more robust error handling as needed.
- **Swing Threading**: Consider using `SwingWorker` for database operations to avoid blocking the UI.

This is a basic example to get you started. You can expand on this with features like user sessions, input validation, and better UI design.